{"version":3,"sources":["screens/HomeScreen.js","screens/SettingsScreen.js","screens/RoundScreen.js","screens/NotFoundScreen.js","App.js","serviceWorker.js","index.js"],"names":["HomeScreen","to","SettingsScreen","RoundScreen","props","videoObjRef","useRef","onClick","e","current","currentTime","ref","controls","width","src","type","NotFoundScreen","App","className","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yNAmBeA,MAhBf,WACE,OACE,oCACE,kDACA,4BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,UAAT,UAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,aAAT,gBCAKC,MATf,WACE,OACE,oCACE,wCACA,kBAAC,IAAD,CAAMD,GAAG,KAAT,iBCYSE,MAjBf,SAAqBC,GAEnB,IAAMC,EAAcC,iBAAO,MAG3B,OACE,oCACE,6CACA,sCACA,4BAAQC,QAAS,SAACC,GAAD,OAAOH,EAAYI,QAAQC,YAAc,MAA1D,wBACA,2BAAOC,IAAKN,EAAaO,UAAQ,EAACC,MAAM,QACtC,4BAAQC,IAAI,mCAAmCC,KAAK,iBCD7CC,MATf,WACE,OACE,oCACE,6CACA,kBAAC,IAAD,CAAMf,GAAG,KAAT,wB,OCqBSgB,MArBf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,KAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,aACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,UACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAAC,EAAD,UCTUC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6e197bba.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction HomeScreen() {\n  return (\n    <>\n      <h1>Free Breathing App</h1>\n      <ul>\n        <li>\n          <Link to=\"/round\">Start</Link>\n        </li>\n        <li>\n          <Link to=\"/settings\">Settings</Link>\n        </li>\n      </ul>\n    </>\n  );\n}\n\nexport default HomeScreen;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction SettingsScreen() {\n  return (\n    <>\n      <h1>Settings</h1>\n      <Link to=\"/\">Return Home</Link>\n    </>\n  );\n}\n\nexport default SettingsScreen;\n","import React, { useState, useRef } from \"react\";\n\nfunction RoundScreen(props) {\n  //1 breath = 4 seconds\n  const videoObjRef = useRef(null);\n\n\n  return (\n    <>\n      <h1>Rounds Screen</h1>\n      <h2>Breath</h2>\n      <button onClick={(e) => videoObjRef.current.currentTime = 950}>Start One More Round</button>\n      <video ref={videoObjRef} controls width=\"100%\">\n        <source src=\"video/3-rounds-of-60-breaths.mp4\" type=\"video/mp4\"></source>\n      </video>\n    </>\n  );\n}\n\nexport default RoundScreen;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nfunction NotFoundScreen() {\n  return (\n    <>\n      <h1>404 Not Found</h1>\n      <Link to=\"/\">Return to Homepage</Link>\n    </>\n  );\n}\n\nexport default NotFoundScreen;\n","import React from \"react\";\nimport HomeScreen from \"./screens/HomeScreen\";\nimport SettingsScreen from \"./screens/SettingsScreen\";\nimport RoundScreen from \"./screens/RoundScreen\";\nimport NotFoundScreen from \"./screens/NotFoundScreen\";\nimport { Route, Switch } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route exact path=\"/\">\n          <HomeScreen />\n        </Route>\n        <Route path=\"/settings\">\n          <SettingsScreen />\n        </Route>\n        <Route path=\"/round\">\n          <RoundScreen />\n        </Route>\n        <Route path=\"*\">\n          <NotFoundScreen />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}